#!/usr/bin/env node

'use strict';

var aws = require('aws-sdk');
var HttpsProxyAgent = require('https-proxy-agent');
var argv = require('yargs').argv;
var Table = require('cli-table');
var fs = require('fs');
var prompt = require('prompt');
var events = require('events');
var Spinner = require('cli-spinner').Spinner;
var app = new events.EventEmitter();

app.on('quit', function() {
    console.log("Quitting");
    process.exit(0);
});

if(argv.hasOwnProperty('profile'))
	var profileToUse = argv.profile;
else
	var profileToUse = 'default';
var credentials = new aws.SharedIniFileCredentials({profile: profileToUse});
aws.config.credentials = credentials;

if (typeof process.env.https_proxy !== 'undefined') {
  aws.config.update({
    httpOptions: {
      agent: new HttpsProxyAgent(process.env.https_proxy)
    }
  });
}

if(argv.hasOwnProperty('region'))
	var regionToUse = argv.region;
else
	var regionToUse = 'ap-southeast-2';
var ec2 = new aws.EC2({region: regionToUse});

/**********************************************
CLI Table Configuration
**********************************************/
var constructed=[];
var table = new Table({
    head: ['','Name','Status','Creation Time']
  , colWidths: [5,50,20,50]
});

/***********************************************
Input Schema Configuration
**********************************************/

// Prompt Schema for input prompt
var deleteListSchema = {
    properties: {
      deleteList: {
     	description: "Enter a comma-separated list of stacks to delete (Example : 1-4,6,7), or q to quit.",
        required: true
      }
    }
  };

var confirmationSchema = {
    properties: {
      confirmation: {
     	description: "Confirm delete ? [yes/no]",
        required: true
      }
    }
  };

/***************************************
Spinner Configuration
***************************************/
var spinner = new Spinner('');
spinner.setSpinnerString(19);



var _cf = new aws.CloudFormation({region:regionToUse});

function usage()
{
	console.log("Usage");
	console.log("---------------------------------------------------------");
	console.log(process.argv[1] + " [--action action] [--profile profileName] [--region awsRegion] [--filterByStatus status] [--pattern pattern] [--help]");
	console.log("action: Action to perform ,currently supported : list , delete");
	console.log("profile: AWS profile to use, defaults to 'default' profile");
	console.log("region: AWS region to use, defaults to 'ap-southeast-2'");
	console.log("filterByStatus: Filter by AWS CloudFormation status");
	console.log("pattern: Matching pattern, '*' wildcard supported");
	console.log("   N.B. '' quotes are required for wildcards to prevent the shell from interpolating them");
	console.log("   e.g. ./cfmgr --pattern 'myproject-.*' to list all the stacks with the prefix of myproject-");
	console.log("help: Display this usage message");
}
var foundStacks = [];

if(!argv.hasOwnProperty('action')){
	argv.action = 'list';
}


/*
 Recursive CF stack finder
*/
function rFindStacks(params,stackars,callback){
	(function(params,stackars,callback){
		_cf.describeStacks(params,function(err,res){
			if(err){
				console.log(err);
				callback(err);
			}
			else {

				// check if CloudFormation stack exist in result set
				if(typeof res.Stacks !== 'undefined'){
					res.Stacks.forEach(function(stack){
            if (argv.action === 'delete') {
                if (!stack.StackStatus.match(/^DELETE_(IN_PROGRESS|COMPLETE)$/) && stack.StackName.match(argv.pattern) !== null) {
                  stackars.push(stack);
                }
            }
            else {
              if(stack.StackName.match(argv.pattern) !== null)
                stackars.push(stack);
            }

					});
				}
				// more ASGs with NextToken
				if(typeof res.NextToken !== 'undefined'){
					params.NextToken = res.NextToken;
					rFindStacks(params,stackars,callback);
				}
				else {

					callback(null);
				}
			}
		});
	})(params,stackars,callback);
}

if(argv.hasOwnProperty('help')){
	usage();
	process.exit(0);
}

var params = {};

spinner.start();
rFindStacks(params,foundStacks,function(err){
  spinner.stop();
	if(err){
		console.log(err);
	}
	else{

		var numCounter =0;
		if(foundStacks.length < 1){
			console.log("No stacks found.");
			process.exit(1);
		}
		console.log("Number of stacks found : "+foundStacks.length);
			for(var i=0;i<foundStacks.length;i++){
				table.push([++numCounter,foundStacks[i].StackName,foundStacks[i].StackStatus,foundStacks[i].CreationTime]);
			}
		console.log(table.toString());
		switch(argv.action){
				case 'list':
					process.exit(0);
					break;
				case 'delete':
					var deleteIndex = [];
					prompt.start();
					prompt.message = "";
					prompt.delimiter="";
				 	prompt.get(deleteListSchema, function (err, result) {
					    if (err) { return onErr(err); }
					    var deleteList = result.deleteList.split(",");
                                            if (deleteList[0] === 'q') {
                                                app.emit('quit');
                                            }
					    for(var i=0; i<deleteList.length;i++)
					    {
					    	var subList = deleteList[i].split("-");
					    	var startCount = subList[0];
					    	var endCount;
					    	if(subList.length > 1){
					    		endCount = parseInt(subList[1]);
					    	}
					    	else {
					    		endCount = parseInt(subList[0]);
					    	}
					    	for(var j=startCount;j<=endCount;j++){
					    		if(j<=0 || j>foundStacks.length){
					    			console.log("Invalid input..");
					    			process.exit(1);
					    		}
					    		deleteIndex.push(j);
					    	}
					    }
					    console.log("Will delete the following stacks...");
					    console.log("------------------------------------");
					    for(var i=0;i<deleteIndex[i];i++){
					    	console.log(table[deleteIndex[i]-1][1]);
					    }
					    console.log("------------------------------------");
					    prompt.get(confirmationSchema, function (err, result) {
					    	if(err) {return onErr(err); }
					    	switch(result.confirmation){
					    		case 'yes':
					    			for(var i=0; i< deleteIndex[i];i++){
					    				var params = {
  											StackName: table[deleteIndex[i]-1][1]
										};
										(function(params) {
										cf.deleteStack(params,function(err,data){
											if(err){
												console.log("Error deleting "+params.StackName);
											}
											else {
												console.log("Deleted "+params.StackName+" ...");
											}
										})})(params);
					    			}
					    			break;
					    		case 'no':
					    			process.exit(0);
					    			break;
					    	}
					    });
				  	});

					break;

		}
	}
});

process.on('SIGINT', function() {
    console.log("Caught interrupt signal, exiting.");
    process.exit(0);
});

function onErr(err) {
    console.log("Error encountered: ", err, err.stack);
};
